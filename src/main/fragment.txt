statePtr: word[32]ptr
nextStatePtr: word[32]ptr
setup: bool = false
alive: word = 5
dead: word = 0

frameCount: word = 0

cellAlivePoint: word = 0xB000

func calculateAliveNeighbours(x: word, y: word): word{
    return 0
}

func updateCell(x: word, y: word){
    aliveNeighbours: word = calculateAliveNeighbours(x, y)
    nextVal: word = dead
    if statePtr[y][x] == alive then{
        if aliveNeighbours == 2 or aliveNeighbours == 3 then
            nextVal = alive
    }
    else if aliveNeighbours == 3 then nextVal = alive

    nextStatePtr[y][x] = nextVal //statePtr[y][x]
}

func longBoiTest(){
    value: word = 10
    for i: word = 0; i == 200; i = i + 1 do{
        if value == 10 then{
            statePtr[0][i] = nextStatePtr[i][i] + 5
            statePtr[0][i] = nextStatePtr[i][i] + 5
            statePtr[0][i] = nextStatePtr[i][i] + 5
            statePtr[0][i] = nextStatePtr[i][i] + 5
            statePtr[0][i] = nextStatePtr[i][i] + 5
            statePtr[0][i] = nextStatePtr[i][i] + 5
            statePtr[0][i] = nextStatePtr[i][i] + 5
            statePtr[0][i] = nextStatePtr[i][i] + 5
        }
        else{
            anythingElse: word = 25
            statePtr[0][i] = nextStatePtr[i][i] + 5
            statePtr[0][i] = nextStatePtr[i][i] + 5
            statePtr[0][i] = nextStatePtr[i][i] + 5
            statePtr[0][i] = nextStatePtr[i][i] + 5
            statePtr[0][i] = nextStatePtr[i][i] + 5
            statePtr[0][i] = nextStatePtr[i][i] + 5
            statePtr[0][i] = nextStatePtr[i][i] + 5
            statePtr[0][i] = nextStatePtr[i][i] + 5
        }
    }
}