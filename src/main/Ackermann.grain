load graphics, palette from "ackermann.png"

include "src/main/GrainLib/DMA.grain"
include "src/main/GrainLib/Hardware.grain"
include "src/main/GrainLib/Backgrounds.grain"

results: word[1024]

incorrect: word = 1
correct: word = 2

func setup(){
    setScreenDisabledAndBrightness(true, 0)
    dmaGraphicsToVRam(graphics, bankof(graphics), sizeof(graphics))
    dmaToCGRam(palette, bankof(palette), sizeof(palette))
    executeDMA()

    setBackgroundAddressAndSize(1, 1, 0)

    enableScreens(true, false, false, false, false)
    enableInputAndNMI()
    setScreenDisabledAndBrightness(false, 15)

    for i: word = 0; i < 1024; i = i + 1 do{
        results[i] = 0
    }
}

func aackermann(m: word, n: word): word asm{
    "lda 6, s"
    "bne nonmzero"
    "lda 4, s"
    "inc A"
    "rtl"
    "nonmzero:"
    "lda 4, s"
    "bne nonnzero"
    "lda 6, s"
    "dec A"
    "pha"
    "lda #1"
    "pha"
    "jsl func_ackermann"
    "plx"
    "plx"
    "rtl"
    "nonnzero:"
    ";lda 4, s unneccessary"
    "tay"
    "dey"
    "lda 6, s"
    "tax"
    "dex"
    "phx"
    "pha"
    "phy"
    "jsl func_ackermann"
    "plx"
    "plx"
    "pha"
    "jsl func_ackermann"
    "plx"
    "plx"
    "rtl"
}

func ackermann(m: word, n: word): word{
    if m == 0 then return (n + 1)
    if n == 0 then return ackermann(m - 1, 1)
    return ackermann(m - 1, ackermann(m, n - 1))
}

func fib(num: word): word{
    a: word = 0
    b: word = 1
    for i: word = 0; i < num; i = i + 1 do{
        temp: word = b
        b = a + b
        a = temp
    }
    return b
}

func delayLama(){
    for i: word = 0; i < 300; i = i + 1 do frame()
}

func main(){
    setup()

    //delayLama()

    //4181
    //for i : word = 0; i < 1024; i = i + 1 do{
    //    val: word = fib(23)
    //    for j: word = 0; j < 20; j = j + 1 do fib(23)
    //    if val == 46368 then results[i] = correct
    //    else results[i] = incorrect
    //    asm{
    //        "lda #1"
    //        "sta 6"
    //    }
    //}

    for i: word = 0; i < 1024; i = i + 1 do{
        //results[i] = correct
        val: word = ackermann(3, 3)
        asm{
            "sta 10"
        }
        if val == 61 then results[i] = correct
        else results[i] = incorrect
        asm{
            "lda #1"
            "sta 6"
        }
    }

    while true do frame()
}

func VBlank(){
    setVRamTarget(0x400)
    dmaArrayToVRam(results, 0, 2048)
    executeDMA()
}