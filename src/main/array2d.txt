statePtr: word[32]ptr
nextStatePtr: word[32]ptr
tempStatePtr: word[32]ptr

golState1: word[32][32]
golState2: word[32][32]

setup: bool = false

alive: word = 5
dead: word = 0

frameCount: word = 0

cellAlivePoint: word = 0xB000

include "src/main/GrainLib/Random.grain"
include "src/main/GrainLib/stdlib.grain"

func setupGolBoard(){
    val: word
    for y: word = 0; y < 32; y = y + 1 do{
        for x : word = 0; x < 32; x = x + 1 do{
            val = dead
            if random() > cellAlivePoint then val = alive
            golState1[y][x] = val
        }
    }
}

func checkIfAlive(x: word, y: word): word{
    x = x and 0x1F
    y = y and 0x1F
    if statePtr[y][x] == alive then return 1
    else return 0
}

func calculateAliveNeighbours(x: word, y: word): word{
    num: word = 0
    num = num + checkIfAlive(x-1, y-1)
    num = num + checkIfAlive(x, y-1)
    num = num + checkIfAlive(x+1, y-1)

    num = num + checkIfAlive(x-1, y)
    num = num + checkIfAlive(x+1, y)

    num = num + checkIfAlive(x-1, y+1)
    num = num + checkIfAlive(x, y+1)
    num = num + checkIfAlive(x+1, y+1)
    return num
}

func updateCell(x: word, y: word){
    aliveNeighbours: word = calculateAliveNeighbours(x, y)
    nextVal: word = dead
    if statePtr[y][x] == alive then{
        if aliveNeighbours == 2 or aliveNeighbours == 3 then
            nextVal = alive
    }
    else if aliveNeighbours == 3 then nextVal = alive

    nextStatePtr[y][x] = nextVal //statePtr[y][x]
}

func stepGameOfLife(){
    for y: word = 0; y < 32; y = y + 1 do
        for x: word = 0; x < 32; x = x + 1 do
            updateCell(x, y)
}

func delayLama(){
    for i: word = 0; i < 200; i = i + 1 do asm{"wai"}
}

func main(){
    setSeed(0x82a1)
    setupGolBoard()
    setup = true

    statePtr = golState1
    nextStatePtr = golState2

    updateCell(0x10, 0x12)

    while true do {
        //if frameCount > 70 then{
            frameCount = 0
            stepGameOfLife()
            tempStatePtr = statePtr
            statePtr = nextStatePtr
            nextStatePtr = tempStatePtr
        //}
        frame()
    }
}

func VBlank(){
    frameCount = frameCount + 1
    if setup then{
        asm{
            "sep #$20"
            ""
            "lda #%00000100"
            "sta $2107   ;This sets the lowest bit for tilemap"
            "            ;so map starts at $0400"
            "stz $210b   ;Tiles start at 0"
            "ldx #$0400"
            "stx $2116   ;Write to VRAM where the map is"
            "            ;But halved bc of the write mode"
            "ldy #$80 ;this is just a thing we have to set"
            "sty $2115   ;VRAM incriment value"
            ""
            "lda #1"
            "sta $4300"
            "lda #$18"
            "sta $4301"
            "ldx 100"
            "stx $4302"
            "lda #$7E"
            "sta $4304"
            "ldx #2048"
            "stx $4305"
            ""
            "lda #1"
            "sta $420B"
            "rep #$20"
        }
    }
}
