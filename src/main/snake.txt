load backgroundSprites, backgroundPalette from "SnakeBackground.png"
load snakeSprites, snakePalette from "SnakePlayfield.png"
load tilemap from "tilemap.csv"

include "src/main/GrainLib/DMA.grain"
include "src/main/GrainLib/Hardware.grain"
include "src/main/GrainLib/Backgrounds.grain"
include "src/main/GrainLib/Random.grain"

playerInput: Input

background: word[32][32]

class SnakeBuffer{
    x: word[600]
    y: word[600]
}
class Vec2{
    x: word
    y: word
}

snakeBuffer: SnakeBuffer
playerVelocity: Vec2
lastFruit: Vec2

tailIndex: word = 0
headIndex: word = 2

emptyTile: word = 15
snakeBodyTile: word = 16
snakeHeadTile: word = 17
snakeTailTile: word = 18
fruitTile: word = 19

gameRunning: bool = true

func setTile(x: word, y: word, tileID: word){
    x = x + 1
    y = y + 5
    background[y][x] = tileID
}
func getTile(x: word, y: word): word{
    x = x + 1
    y = y + 5
    return background[y][x]
}
func isSnakeTile(x: word, y: word): bool{
    atTileID: word = getTile(x, y)
    return atTileID == snakeHeadTile or atTileID == snakeBodyTile or atTileID == snakeTailTile
}
func spawnFruit(){
    x: word = random() & 0x1F
    y: word = random() & 0x1F

    if x >= 30 then x = x - 10
    if y >= 20 then y = y - 16

    if isSnakeTile(x, y) or (x == lastFruit.x and y == lastFruit.y) then{
        spawnFruit()
    }
    else{
        setTile(x, y, fruitTile)
        lastFruit.x = x
        lastFruit.y = y
    }
}

func sendDataToBackground2(){
    setVRamTarget(0x800)
    dmaArrayToVRam(background as word ptr, 0, 2048)
    executeDMA()
}

func initSnake(){
    for i: word = 0; i < 1024; i += 1 do
        (background as word[1024])[i] = emptyTile
    for i: word = 0; i < 1200; i += 1 do
        (snakeBuffer as word[1200])[i] = 0

    snakeBuffer.x[0] = 20
    snakeBuffer.x[1] = 20
    snakeBuffer.x[2] = 20
    snakeBuffer.y[0] = 11
    snakeBuffer.y[1] = 10
    snakeBuffer.y[2] = 9

    setTile(20, 11, snakeTailTile)
    setTile(20, 10, snakeBodyTile)
    setTile(20, 9, snakeHeadTile)

    tailIndex = 0
    headIndex = 2

    playerVelocity.x = 0
    playerVelocity.y = -1

    setBackgroundAddressAndSize(1, 2, 0)
}

func secondarySetup() {
    initSnake()
    lastFruit.x = -1
    lastFruit.y = -1
    spawnFruit()
    sendDataToBackground2()
}

func setup() {
    setScreenDisabledAndBrightness(true, 0)
    dmaGraphicsToVRam(backgroundSprites, bankof(backgroundSprites), sizeof(backgroundSprites))
    dmaToCGRam(snakePalette, bankof(snakePalette), 64)
    executeDMA()

    dmaGraphicsToVRam(snakeSprites, bankof(snakeSprites), sizeof(snakeSprites))
    dmaToCGRam(backgroundPalette, bankof(backgroundPalette), 32)
    executeDMA()

    setBackgroundColour(ascolour(0, 7, 2, 0))

    setVRamTarget(0x400)
    setBackgroundAddressAndSize(2, 1, 0)
    dmaDataToVRam(tilemap, bankof(tilemap), sizeof(tilemap))
    executeDMA()

    secondarySetup()

    enableScreens(true, true, false, false, false)
    enableInputAndNMI()
    setScreenDisabledAndBrightness(false, 15)
}

func updatePlayerDirectionalOffset(){
    if playerInput.Left then{
        playerVelocity.x = -1
        playerVelocity.y = 0
    }
    else if playerInput.Right then{
        playerVelocity.x = 1
        playerVelocity.y = 0
    }
    else if playerInput.Up then{
        playerVelocity.x = 0
        playerVelocity.y = -1
    }
    else if playerInput.Down then{
        playerVelocity.x = 0
        playerVelocity.y = 1
    }
}

func updateFrame(){
    updatePlayerInput(playerInput@, 1)
    updatePlayerDirectionalOffset()

    headX: word = snakeBuffer.x[headIndex]
    headY: word = snakeBuffer.y[headIndex]
    newX: word = headX + playerVelocity.x
    newY: word = headY + playerVelocity.y

    if newX >= 0 and newY >= 0 and newX < 30 and newY < 20 and getTile(newX, newY) != snakeBodyTile then{
        ateFruit: bool = getTile(newX, newY) == fruitTile
        if !ateFruit then setTile(snakeBuffer.x[tailIndex], snakeBuffer.y[tailIndex], emptyTile)
        setTile(newX, newY, snakeHeadTile)
        setTile(headX, headY, snakeBodyTile)
        headIndex = headIndex + 1
        if !ateFruit then{
            tailIndex = tailIndex + 1
            if tailIndex == 600 then tailIndex = 0
            setTile(snakeBuffer.x[tailIndex], snakeBuffer.y[tailIndex], snakeTailTile)
        }
        else{
            spawnFruit()
        }
        if headIndex == 600 then headIndex = 0
        snakeBuffer.x[headIndex] = newX
        snakeBuffer.y[headIndex] = newY
    }
    else gameRunning = false

    for i: word = 0; i < 8; i = i + 1 do{
        updatePlayerInput(playerInput@, 1)
        updatePlayerDirectionalOffset()
        frame()
    }
}

func addGameOverText(){
    background[3][12] = 20
    background[3][13] = 21
    background[3][14] = 22
    background[3][15] = 23
    background[3][16] = 24
    background[3][17] = 25
    background[3][18] = 23
    background[3][19] = 26
}

func main(){

    setSeed(0x92A6)
    setup()
    while true do{
        while gameRunning do updateFrame()

        addGameOverText()

        while playerInput.R == false do{
            updatePlayerInput(playerInput@, 1)
            frame()
        }

        secondarySetup()

        gameRunning = true
    }
}

func VBlank() {
    sendDataToBackground2()
}