[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\mattt\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\mattt\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Oracle Corporation Java 16.0.1)
[debug]       Load.loadUnit: plugins took 135.1775ms
[debug]       Load.loadUnit: defsScala took 0.2733ms
[debug] [Loading] Scanning directory C:\Users\mattt\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\mattt\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 31.6459 ms
[debug]           Load.resolveProject(global-plugins) took 70.2041ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\mattt\.sbt\1.0\plugins, plugins: List(<none>))) took 135.5038ms
[debug] [Loading] Done in C:\Users\mattt\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 175.9898ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.6344ms
[debug]     Load.loadUnit(file:/C:/Users/mattt/.sbt/1.0/plugins/, ...) took 323.8877ms
[debug]   Load.apply: load took 573.328ms
[debug]   Load.apply: resolveProjects took 6.8841ms
[debug]   Load.apply: finalTransforms took 87.1978ms
[debug]   Load.apply: config.delegates took 14.5041ms
[debug]   Load.apply: Def.make(settings)... took 611.8051ms
[debug]   Load.apply: structureIndex took 164.6308ms
[debug]   Load.apply: mkStreams took 3.0504ms
[info] loading global plugins from C:\Users\mattt\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3131.9367ms
[debug]           Load.loadUnit: plugins took 34.3577ms
[debug]           Load.loadUnit: defsScala took 0.004ms
[debug] [Loading] Scanning directory C:\Users\mattt\Documents\Dissertation\Grain\project
[debug]             Load.loadUnit: mkEval took 6.3736ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\mattt\Documents\Dissertation\Grain\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.4011 ms
[info] loading settings for project grain-build from idea.sbt ...
[debug]               Load.resolveProject(grain-build) took 4.9206ms
[debug]             Load.loadTransitive: finalizeProject(Project(id grain-build, base: C:\Users\mattt\Documents\Dissertation\Grain\project, plugins: List(<none>))) took 8.1632ms
[debug] [Loading] Done in C:\Users\mattt\Documents\Dissertation\Grain\project, returning: (grain-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 234.5503ms
[debug]           Load.loadUnit: cleanEvalClasses took 10.921ms
[debug]         Load.loadUnit(file:/C:/Users/mattt/Documents/Dissertation/Grain/project/, ...) took 281.0407ms
[debug]       Load.apply: load took 283.4276ms
[debug]       Load.apply: resolveProjects took 0.2633ms
[debug]       Load.apply: finalTransforms took 16.8368ms
[debug]       Load.apply: config.delegates took 0.4958ms
[debug]       Load.apply: Def.make(settings)... took 95.1292ms
[debug]       Load.apply: structureIndex took 31.7346ms
[debug]       Load.apply: mkStreams took 0.0029ms
[info] loading project definition from C:\Users\mattt\Documents\Dissertation\Grain\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 1927.0574ms
[debug]     Load.loadUnit: defsScala took 0.0039ms
[debug] [Loading] Scanning directory C:\Users\mattt\Documents\Dissertation\Grain
[debug]       Load.loadUnit: mkEval took 0.4187ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.4174 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 58.3212ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\mattt\Documents\Dissertation\Grain, plugins: List(<none>))) took 62.8827ms
[debug] [Loading] Done in C:\Users\mattt\Documents\Dissertation\Grain, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 4223.8409ms
[debug]     Load.loadUnit: cleanEvalClasses took 22.4514ms
[debug]   Load.loadUnit(file:/C:/Users/mattt/Documents/Dissertation/Grain/, ...) took 6174.5676ms
[debug] Load.apply: load took 6176.4226ms
[debug] Load.apply: resolveProjects took 0.1494ms
[debug] Load.apply: finalTransforms took 61.5162ms
[debug] Load.apply: config.delegates took 0.3658ms
[debug] Load.apply: Def.make(settings)... took 77.3475ms
[debug] Load.apply: structureIndex took 28.1546ms
[debug] Load.apply: mkStreams took 0.0021ms
[info] set current project to Grain (in build file:/C:/Users/mattt/Documents/Dissertation/Grain/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 58564 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 58564, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Grain (in build file:/C:/Users/mattt/Documents/Dissertation/Grain/)
[debug] > Exec(idea-shell, None, None)
