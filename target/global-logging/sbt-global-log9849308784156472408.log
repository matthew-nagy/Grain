[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\mattt\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\mattt\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Oracle Corporation Java 16.0.1)
[debug]       Load.loadUnit: plugins took 219.0226ms
[debug]       Load.loadUnit: defsScala took 1.5573ms
[debug] [Loading] Scanning directory C:\Users\mattt\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\mattt\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 36.8243 ms
[debug]           Load.resolveProject(global-plugins) took 74.2953ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\mattt\.sbt\1.0\plugins, plugins: List(<none>))) took 148.3924ms
[debug] [Loading] Done in C:\Users\mattt\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 187.4127ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3387ms
[debug]     Load.loadUnit(file:/C:/Users/mattt/.sbt/1.0/plugins/, ...) took 424.3939ms
[debug]   Load.apply: load took 761.8ms
[debug]   Load.apply: resolveProjects took 8.4374ms
[debug]   Load.apply: finalTransforms took 102.0246ms
[debug]   Load.apply: config.delegates took 11.9232ms
[debug]   Load.apply: Def.make(settings)... took 543.4157ms
[debug]   Load.apply: structureIndex took 151.8671ms
[debug]   Load.apply: mkStreams took 2.3892ms
[info] loading global plugins from C:\Users\mattt\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 7124.0744ms
[debug]           Load.loadUnit: plugins took 40.3645ms
[debug]           Load.loadUnit: defsScala took 0.0037ms
[debug] [Loading] Scanning directory C:\Users\mattt\Documents\Dissertation\Grain\project
[debug]             Load.loadUnit: mkEval took 11.213ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\mattt\Documents\Dissertation\Grain\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.9098 ms
[info] loading settings for project grain-build from idea.sbt ...
[debug]               Load.resolveProject(grain-build) took 16.242ms
[debug]             Load.loadTransitive: finalizeProject(Project(id grain-build, base: C:\Users\mattt\Documents\Dissertation\Grain\project, plugins: List(<none>))) took 20.0969ms
[debug] [Loading] Done in C:\Users\mattt\Documents\Dissertation\Grain\project, returning: (grain-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 3177.8845ms
[debug]           Load.loadUnit: cleanEvalClasses took 12.6078ms
[debug]         Load.loadUnit(file:/C:/Users/mattt/Documents/Dissertation/Grain/project/, ...) took 3232.1968ms
[debug]       Load.apply: load took 3234.2568ms
[debug]       Load.apply: resolveProjects took 0.1898ms
[debug]       Load.apply: finalTransforms took 17.5386ms
[debug]       Load.apply: config.delegates took 0.5727ms
[debug]       Load.apply: Def.make(settings)... took 628.413ms
[debug]       Load.apply: structureIndex took 104.5485ms
[debug]       Load.apply: mkStreams took 0.0039ms
[info] loading project definition from C:\Users\mattt\Documents\Dissertation\Grain\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 6954.0145ms
[debug]     Load.loadUnit: defsScala took 0.0053ms
[debug] [Loading] Scanning directory C:\Users\mattt\Documents\Dissertation\Grain
[debug]       Load.loadUnit: mkEval took 0.4007ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 4.2887 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 54.8323ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\mattt\Documents\Dissertation\Grain, plugins: List(<none>))) took 61.737ms
[debug] [Loading] Done in C:\Users\mattt\Documents\Dissertation\Grain, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2334.138ms
[debug]     Load.loadUnit: cleanEvalClasses took 35.7942ms
[debug]   Load.loadUnit(file:/C:/Users/mattt/Documents/Dissertation/Grain/, ...) took 9325.1705ms
[debug] Load.apply: load took 9327.9094ms
[debug] Load.apply: resolveProjects took 0.1884ms
[debug] Load.apply: finalTransforms took 58.4746ms
[debug] Load.apply: config.delegates took 0.6119ms
[debug] Load.apply: Def.make(settings)... took 97.1207ms
[debug] Load.apply: structureIndex took 32.0355ms
[debug] Load.apply: mkStreams took 0.003ms
[info] set current project to Grain (in build file:/C:/Users/mattt/Documents/Dissertation/Grain/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 49742 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 49742, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Grain (in build file:/C:/Users/mattt/Documents/Dissertation/Grain/)
[debug] > Exec(idea-shell, None, None)
